generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id         String   @id @default(uuid())
    username   String
    email      String   @unique
    password   String
    signedUpAt DateTime @default(now())
    avatarUrl  String?

    // relations
    lastActiveListId    String?
    tasklistsOwned      Tasklist[]
    tasksOwned          Task[]
    listsParticipating  ListParticipant[]
    entityEventsCreated EntityEvent[]
    //
    commentsCreated     EntityComment[]
}

model Tasklist {
    id          String   @id @default(uuid())
    title       String
    description String?
    createdAt   DateTime @default(now())

    // relations
    owner        User              @relation(fields: [ownerId], references: [id])
    ownerId      String
    //
    parentList   Tasklist?         @relation("list-parent-child", fields: [parentListId], references: [id])
    parentListId String?
    childLists   Tasklist[]        @relation("list-parent-child")
    //
    tasks        Task[]
    //
    participants ListParticipant[]
    //
    events       EntityEvent[]
    //
    comments     EntityComment[]
}

enum ListPermission {
    Manage
    Edit
    Comment
    View
}

model ListParticipant {
    id         String         @id @default(uuid())
    permission ListPermission @default(Edit)

    // relations
    list   Tasklist @relation(fields: [listId], references: [id])
    listId String
    //
    user   User     @relation(fields: [userId], references: [id])
    userId String
}

enum TaskStatus {
    BACKLOG
    OPEN
    IN_PROGRESS
    IN_REVIEW
    COMPLETED
    DISCARDED
}

enum TaskPriority {
    URGENT
    HIGH
    MEDIUM
    NONE
    LOW
    OPTIONAL
}

// @TODO: migrate away from db defaults, everything should come from core services
model Task {
    id          String       @id @default(uuid())
    title       String
    description String?
    status      TaskStatus   @default(OPEN)
    priority    TaskPriority @default(NONE)

    createdAt       DateTime  @default(now())
    statusUpdatedAt DateTime
    deadline        DateTime?
    // @TODO: store sorting information

    // relations
    owner        User            @relation(fields: [ownerId], references: [id])
    ownerId      String
    //
    list         Tasklist        @relation(fields: [listId], references: [id])
    listId       String
    //
    parentTask   Task?           @relation("task-parent-child", fields: [parentTaskId], references: [id])
    parentTaskId String?
    subtasks     Task[]          @relation("task-parent-child")
    //
    events       EntityEvent[]
    //
    comments     EntityComment[]
}

enum EntityEventType {
    // Any entity
    TITLE_CHANGED

    // Tasklist
    LIST_PARENT_LIST_CHANGED

    // Task
    TASK_PARENT_LIST_CHANGED
    TASK_PARENT_TASK_CHANGED
    TASK_STATUS_CHANGED
    TASK_PRIORITY_CHANGED
    TASK_DEADLINE_CHANGED
}

model EntityEvent {
    id        String          @id
    type      EntityEventType
    timestamp DateTime
    metaData  Json

    // relations
    taskId String?
    task   Task?     @relation(fields: [taskId], references: [id], onDelete: Cascade)
    //
    listId String?
    list   Tasklist? @relation(fields: [listId], references: [id], onDelete: Cascade)
    //
    user   User      @relation(fields: [userId], references: [id])
    userId String
}

enum EntityCommentType {
    TASK_COMMENT
    TASKLIST_COMMENT
}

model EntityComment {
    id         String            @id @map("id")
    type       EntityCommentType @map("type")
    text       String            @map("text")
    createdAt  DateTime          @map("created_at")
    updatedAt  DateTime          @map("updated_at")
    resolvedAt DateTime?         @map("resolved_at")

    // relations
    parentCommentId String?         @map("parent_comment_id")
    parentComment   EntityComment?  @relation("comments_parent_child", fields: [parentCommentId], references: [id], onDelete: Cascade)
    replies         EntityComment[] @relation("comments_parent_child")
    //
    taskId          String?         @map("task_id")
    task            Task?           @relation(fields: [taskId], references: [id], onDelete: Cascade)
    //
    listId          String?         @map("list_id")
    list            Tasklist?       @relation(fields: [listId], references: [id], onDelete: Cascade)
    //
    userId          String          @map("user_id")
    user            User            @relation(fields: [userId], references: [id])

    @@map("entity_comments")
}
